rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Videos collection
    match /videos/{videoId} {
      allow read: if true;  // Public read access
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      // Allow updates if user is owner OR if only updating view/like/comment counts
      allow update: if isOwner(resource.data.creatorId) || 
        (isSignedIn() && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount', 'likeCount', 'viewCount']));
      allow delete: if isOwner(resource.data.creatorId);
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update: if isOwner(resource.data.userId) || 
          (isSignedIn() && 
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount', 'likedBy']));
        allow delete: if isOwner(resource.data.userId);
      }
      
      // Metadata subcollection (for comment summaries, etc)
      match /metadata/{docId} {
        allow read: if true;  // Public read access for summaries
      }
      
      // Likes subcollection
      match /likes/{userId} {
        allow read: if true;
        allow write: if isOwner(userId);
      }
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if false;  // Don't allow user deletion

      // Liked videos subcollection
      match /liked_videos/{videoId} {
        allow read: if true;
        allow write: if isOwner(userId);
      }

      // Video history subcollection - more permissive rules
      match /video_history/{videoId} {
        allow read: if isOwner(userId);
        // Allow create/update if user owns the history and data is valid
        allow create, update: if isOwner(userId) && 
          request.resource.data.keys().hasOnly(['videoId', 'viewedAt']) &&
          request.resource.data.videoId is string;
        allow delete: if isOwner(userId);
      }
    }
    
    // Playlists collection
    match /playlists/{playlistId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
  }
}